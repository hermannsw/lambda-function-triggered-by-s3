AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sample_lambda_function_triggered_by_s3

  Sample SAM Template for sample_lambda_function_triggered_by_s3

Globals:
  Function:
    Timeout: 3

Parameters:
  SrcBucketName:
    Type: String
    Default: 'target-s3-bucket-name'

  LoggingBucketName:
    Type: String
    Default: 'sample-lambda-function-triggered-by-s3-logs'

Resources:
  # Bucket for CloudTrail Logs
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref LoggingBucketName

  # Bucket policy enables CloudTrail to write to the logging bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: LoggingBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource:
              !Sub |-
              arn:aws:s3:::${LoggingBucket}
          - Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
              arn:aws:s3:::${LoggingBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"

  # The CloudTrail trail - uses the LoggingBucketName as the trail name
  myTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - BucketPolicy
    Properties:
      TrailName: !Ref LoggingBucketName
      S3BucketName:
        Ref: LoggingBucket
      IsLogging: true
      IsMultiRegionTrail: false
      EventSelectors:
        - IncludeManagementEvents: false
          DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub |-
                  arn:aws:s3:::${SrcBucketName}/
      IncludeGlobalServiceEvents: false

  # EventBridge rule - invokes HelloWorldFunction
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      State: "ENABLED"
      EventPattern:
        source:
          - "aws.s3"
        detail:
          eventName:
            - "PutObject"
          requestParameters:
            bucketName:
              - !Ref SrcBucketName
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "HelloWorldFunction"
              - "Arn"
          Id: "HelloWorldFunctionTarget"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "HelloWorldFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "EventRule"
          - "Arn"

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.7

Outputs:
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
